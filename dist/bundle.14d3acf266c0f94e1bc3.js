!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e){t.exports=function(t,e,r){return(t[0]-r[0])*(e[1]-r[1])-(e[0]-r[0])*(t[1]-r[1])}},function(t,e,r){var n=r(22);t.exports={union:function(t,e){return n(t,e,!1,!1)},intersection:function(t,e){return n(t,e,!0,!0)},diff:function(t,e){return n(t,e,!1,!0)},clip:n}},function(t,e){t.exports=function(t,e){return t[0]===e[0]&&t[1]===e[1]}},function(t,e,r){var n=r(0);t.exports=function(t,e){var r=t.point,i=e.point;return r[0]>i[0]?1:r[0]<i[0]?-1:r[1]!==i[1]?r[1]>i[1]?1:-1:function(t,e,r,i){if(t.left!==e.left)return t.left?1:-1;if(0!==n(r,t.otherEvent.point,e.otherEvent.point))return t.isBelow(e.otherEvent.point)?-1:1;return!t.isSubject&&e.isSubject?1:-1}(t,e,r)}},function(t,e){function r(){}function n(t){this._tree=t,this._ancestors=[],this._cursor=null}r.prototype.clear=function(){this._root=null,this.size=0},r.prototype.find=function(t){for(var e=this._root;null!==e;){var r=this._comparator(t,e.data);if(0===r)return e.data;e=e.get_child(r>0)}return null},r.prototype.findIter=function(t){for(var e=this._root,r=this.iterator();null!==e;){var n=this._comparator(t,e.data);if(0===n)return r._cursor=e,r;r._ancestors.push(e),e=e.get_child(n>0)}return null},r.prototype.lowerBound=function(t){for(var e=this._root,r=this.iterator(),n=this._comparator;null!==e;){var i=n(t,e.data);if(0===i)return r._cursor=e,r;r._ancestors.push(e),e=e.get_child(i>0)}for(var o=r._ancestors.length-1;o>=0;--o)if(n(t,(e=r._ancestors[o]).data)<0)return r._cursor=e,r._ancestors.length=o,r;return r._ancestors.length=0,r},r.prototype.upperBound=function(t){for(var e=this.lowerBound(t),r=this._comparator;null!==e.data()&&0===r(e.data(),t);)e.next();return e},r.prototype.min=function(){var t=this._root;if(null===t)return null;for(;null!==t.left;)t=t.left;return t.data},r.prototype.max=function(){var t=this._root;if(null===t)return null;for(;null!==t.right;)t=t.right;return t.data},r.prototype.iterator=function(){return new n(this)},r.prototype.each=function(t){for(var e,r=this.iterator();null!==(e=r.next());)if(!1===t(e))return},r.prototype.reach=function(t){for(var e,r=this.iterator();null!==(e=r.prev());)if(!1===t(e))return},n.prototype.data=function(){return null!==this._cursor?this._cursor.data:null},n.prototype.next=function(){if(null===this._cursor){var t=this._tree._root;null!==t&&this._minNode(t)}else{var e;if(null===this._cursor.right)do{if(e=this._cursor,!this._ancestors.length){this._cursor=null;break}this._cursor=this._ancestors.pop()}while(this._cursor.right===e);else this._ancestors.push(this._cursor),this._minNode(this._cursor.right)}return null!==this._cursor?this._cursor.data:null},n.prototype.prev=function(){if(null===this._cursor){var t=this._tree._root;null!==t&&this._maxNode(t)}else{var e;if(null===this._cursor.left)do{if(e=this._cursor,!this._ancestors.length){this._cursor=null;break}this._cursor=this._ancestors.pop()}while(this._cursor.left===e);else this._ancestors.push(this._cursor),this._maxNode(this._cursor.left)}return null!==this._cursor?this._cursor.data:null},n.prototype._minNode=function(t){for(;null!==t.left;)this._ancestors.push(t),t=t.left;this._cursor=t},n.prototype._maxNode=function(t){for(;null!==t.right;)this._ancestors.push(t),t=t.right;this._cursor=t},t.exports=r},function(t,e){t.exports={NORMAL:0,NON_CONTRIBUTING:1,SAME_TRANSITION:2,DIFFERENT_TRANSITION:3}},function(t,e,r){var n=r(18),i=r(17),o=r(8),s=o.isArray,u=o.equals,h=o.orientRings;function a(t,e){this.vertices=null,this.edges=null,this._closed=!1,this._distance=0,t&&this.data(t),this._arcSegments=void 0!==e?e:5}a.prototype.data=function(t){if(this._edges=[],!s(t))throw new Error("Offset requires at least one coodinate to work with");return s(t)&&"number"==typeof t[0]?this.vertices=t:(this.vertices=h(t),this._processContour(this.vertices,this._edges)),this},a.prototype._processContour=function(t,e){var r,i;if(s(t[0])&&"number"==typeof t[0][0])for(i=t.length,u(t[0],t[i-1])&&(i-=1),r=0;r<i;r++)e.push(new n(t[r],t[(r+1)%i]));else for(r=0,i=t.length;r<i;r++)e.push([]),this._processContour(t[r],e[e.length-1])},a.prototype.arcSegments=function(t){return this._arcSegments=t,this},a.prototype.validate=function(t){var e=t.length;return"number"==typeof t[0]?[t]:(t[0][0]===t[e-1][0]&&t[0][1]===t[e-1][1]&&e>1&&(t=t.slice(0,e-1),this._closed=!0),t)},a.prototype.createArc=function(t,e,r,n,i,o,s){var u=2*Math.PI,h=Math.atan2(n[1]-e[1],n[0]-e[0]),a=Math.atan2(i[1]-e[1],i[0]-e[0]);o%2==0&&(o-=1),h<0&&(h+=u),a<0&&(a+=u);var c=h>a?h-a:h+u-a,l=(s?-c:u-c)/o;t.push(n);for(var f=1;f<o;++f)c=h+l*f,t.push([e[0]+Math.cos(c)*r,e[1]+Math.sin(c)*r]);return t.push(i),t},a.prototype.distance=function(t,e){return this._distance=t||0,this},a.degreesToUnits=function(t,e){switch(e){case"miles":t/=69.047;break;case"feet":t/=364568;break;case"kilometers":t/=111.12;break;case"meters":case"metres":t/=111120}return t},a.prototype.ensureLastPoint=function(t){return u(t[0],t[t.length-1])||t.push([t[0][0],t[0][1]]),t},a.prototype.offset=function(t){return this.distance(t),0===this._distance?this.vertices:this._distance>0?this.margin(this._distance):this.padding(-this._distance)},a.prototype._offsetSegment=function(t,e,r,n){for(var i=[],o=[r.offset(r._inNormal[0]*n,r._inNormal[1]*n),r.inverseOffset(r._outNormal[0]*n,r._outNormal[1]*n)],s=0;s<2;s++){var u=o[s],h=o[(s+2-1)%2];this.createArc(i,0===s?t:e,n,h.next,u.current,this._arcSegments,!0)}return i},a.prototype.margin=function(t){if(this.distance(t),"number"==typeof this.vertices[0])return this.offsetPoint(this._distance);if(0===t)return this.vertices;var e=this.offsetLines(this._distance);return e=i.union(this.vertices,e),h(e)},a.prototype.padding=function(t){if(this.distance(t),0===this._distance)return this.ensureLastPoint(this.vertices);if(2===this.vertices.length&&"number"==typeof this.vertices[0])return this.vertices;var e=this.offsetLines(this._distance),r=i.diff(this.vertices,e);return h(r)},a.prototype.offsetLine=function(t){return 0===t?this.vertices:h(this.offsetLines(t))},a.prototype.offsetLines=function(t){if(t<0)throw new Error("Cannot apply negative margin to the line");var e;if(this.distance(t),s(this.vertices[0])&&"number"!=typeof this.vertices[0][0])for(var r=0,n=this._edges.length;r<n;r++)e=0===r?this.offsetContour(this.vertices[r],this._edges[r]):i.union(e,this.offsetContour(this.vertices[r],this._edges[r]));else e=1===this.vertices.length?this.offsetPoint():this.offsetContour(this.vertices,this._edges);return e},a.prototype.offsetContour=function(t,e){var r,n,o;if(s(t[0])&&"number"==typeof t[0][0])for(n=0,o=t.length-1;n<o;n++){var u=this.ensureLastPoint(this._offsetSegment(t[n],t[n+1],e[n],this._distance));r=0===n?[this.ensureLastPoint(u)]:i.union(r,this.ensureLastPoint(u))}else for(n=0,o=e.length;n<o;n++)r=0===n?this.offsetContour(t[n],e[n]):i.union(r,this.offsetContour(t[n],e[n]));return r},a.prototype.offsetPoint=function(t){this.distance(t);var e=2*this._arcSegments,r=[],n=this.vertices,i=this._distance,o=0;e%2==0&&e++;for(var s=0;s<e;s++)o+=2*Math.PI/e,r.push([n[0]+i*Math.cos(o),n[1]+i*Math.sin(o)]);return h([this.ensureLastPoint(r)])},a.orientRings=h,t.exports=a},function(t,e,r){"use strict";r.r(e);var n={};r.r(n),r.d(n,"setup",function(){return l}),r.d(n,"draw",function(){return f}),r.d(n,"mousePressed",function(){return p}),r.d(n,"keyReleased",function(){return d});var i=r(1),o=r.n(i),s=r(6),u=r.n(s);const h=[[108.5,41],[55.5,375],[484.5,427],[798.5,408],[808.5,166]],a=[[108.5,241],[65.5,375],[484.5,527],[698.5,408],[808.5,166],[654.5,231]];let c=5;function l(){createCanvas(860,480).parent("#canvas"),background(55)}function f(){background(55),noFill(),strokeWeight(3),stroke(255,0,0,150),beginShape(),a.map(t=>vertex.apply(this,t)),endShape(CLOSE),fill(0,255,0,50),strokeWeight(3),stroke(0,255,0,150),beginShape(),h.map(t=>vertex.apply(this,t)),endShape(CLOSE);o.a;let t=o.a.intersection(h,a);t=t[0],fill(0,0,255,50),strokeWeight(3),stroke(0,0,255,150),beginShape(),t.map(t=>vertex.apply(this,t)),endShape();const e=(new u.a).data(t).padding(c);fill(255,255,255,50),strokeWeight(3),stroke(255,255,255,150),beginShape(),e[0].map(t=>vertex.apply(this,t)),endShape()}function p(){}function d(){switch(key){case"A":c-=c>1?1:0,console.log(c);break;case"D":c+=c<15?1:0,console.log(c)}}(t=>Object.keys(n).forEach(e=>{t[e]=n[e]}))(window)},function(t,e){var r=t.exports.isArray=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};t.exports.equals=function(t,e){return t[0]===e[0]&&t[1]===e[1]},t.exports.orientRings=function t(e,n,i){var o,s;if(n=n||0,r(e)&&"number"==typeof e[0][0]){var u=0,h=e;for(o=0,s=h.length;o<s;o++){var a=h[o],c=h[(o+1)%s];u+=a[0]*c[1],u-=c[0]*a[1]}(!i&&u>0||i&&u<0)&&h.reverse()}else for(o=0,s=e.length;o<s;o++)t(e[o],n+1,o>0);return e}},function(t,e){function r(t,e){return t[0]*e[1]-t[1]*e[0]}function n(t,e){return t[0]*e[0]+t[1]*e[1]}t.exports=function(t,e,i,o,s){var u=[e[0]-t[0],e[1]-t[1]],h=[o[0]-i[0],o[1]-i[1]];function a(t,e,r){return[t[0]+e*r[0],t[1]+e*r[1]]}var c=[i[0]-t[0],i[1]-t[1]],l=r(u,h),f=l*l,p=n(u,u);if(f>1e-9*p*n(h,h)){var d=r(c,h)/l;if(d<0||d>1)return null;var v=r(c,u)/l;return v<0||v>1?null:s?null:[a(t,d,u)]}var _=n(c,c);if((f=(l=r(c,u))*l)>1e-9*p*_)return null;var g=n(u,c)/p,y=g+n(u,h)/p,x=Math.min(g,y),I=Math.max(g,y);return x<=1&&I>=0?1===x?s?null:[a(t,x>0?x:0,u)]:0===I?s?null:[a(t,I<1?I:1,u)]:s&&0===x&&1===I?null:[a(t,x>0?x:0,u),a(t,I<1?I:1,u)]:null}},function(t,e,r){var n=r(0),i=r(3),o=r(2);t.exports=function(t,e){return t===e?0:0!==n(t.point,t.otherEvent.point,e.point)||0!==n(t.point,t.otherEvent.point,e.otherEvent.point)?o(t.point,e.point)?t.isBelow(e.otherEvent.point)?-1:1:t.point[0]===e.point[0]?t.point[1]<e.point[1]?-1:1:1===i(t,e)?e.isAbove(t.point)?-1:1:t.isBelow(e.point)?-1:1:t.isSubject!==e.isSubject?t.isSubject?-1:1:o(t.point,e.point)?o(t.otherEvent.point,e.otherEvent.point)?0:t.contourId>e.contourId?1:-1:1===i(t,e)?1:-1}},function(t,e,r){var n=r(0),i=r(5);function o(t,e,r,n,o){this.left=e,this.point=t,this.otherEvent=r,this.isSubject=n,this.type=o||i.NORMAL,this.inOut=!1,this.otherInOut=!1,this.prevInResult=null,this.inResult=!1,this.resultInOut=!1}o.prototype={isBelow:function(t){return this.left?n(this.point,this.otherEvent.point,t)>0:n(this.otherEvent.point,this.point,t)>0},isAbove:function(t){return!this.isBelow(t)},isVertical:function(){return this.point[0]===this.otherEvent.point[0]}},t.exports=o},function(t,e,r){var n=r(4);function i(t){this.data=t,this.left=null,this.right=null}function o(t){this._root=null,this._comparator=t,this.size=0}i.prototype.get_child=function(t){return t?this.right:this.left},i.prototype.set_child=function(t,e){t?this.right=e:this.left=e},o.prototype=new n,o.prototype.insert=function(t){if(null===this._root)return this._root=new i(t),this.size++,!0;for(var e=0,r=null,n=this._root;;){if(null===n)return n=new i(t),r.set_child(e,n),ret=!0,this.size++,!0;if(0===this._comparator(n.data,t))return!1;e=this._comparator(n.data,t)<0,r=n,n=n.get_child(e)}},o.prototype.remove=function(t){if(null===this._root)return!1;var e=new i(void 0),r=e;r.right=this._root;for(var n=null,o=null,s=1;null!==r.get_child(s);){n=r,r=r.get_child(s);var u=this._comparator(t,r.data);s=u>0,0===u&&(o=r)}return null!==o&&(o.data=r.data,n.set_child(n.right===r,r.get_child(null===r.left)),this._root=e.right,this.size--,!0)},t.exports=o},function(t,e,r){var n=r(4);function i(t){this.data=t,this.left=null,this.right=null,this.red=!0}function o(t){this._root=null,this._comparator=t,this.size=0}function s(t){return null!==t&&t.red}function u(t,e){var r=t.get_child(!e);return t.set_child(!e,r.get_child(e)),r.set_child(e,t),t.red=!0,r.red=!1,r}function h(t,e){return t.set_child(!e,u(t.get_child(!e),!e)),u(t,e)}i.prototype.get_child=function(t){return t?this.right:this.left},i.prototype.set_child=function(t,e){t?this.right=e:this.left=e},o.prototype=new n,o.prototype.insert=function(t){var e=!1;if(null===this._root)this._root=new i(t),e=!0,this.size++;else{var r=new i(void 0),n=0,o=0,a=null,c=r,l=null,f=this._root;for(c.right=this._root;;){if(null===f?(f=new i(t),l.set_child(n,f),e=!0,this.size++):s(f.left)&&s(f.right)&&(f.red=!0,f.left.red=!1,f.right.red=!1),s(f)&&s(l)){var p=c.right===a;f===l.get_child(o)?c.set_child(p,u(a,!o)):c.set_child(p,h(a,!o))}var d=this._comparator(f.data,t);if(0===d)break;o=n,n=d<0,null!==a&&(c=a),a=l,l=f,f=f.get_child(n)}this._root=r.right}return this._root.red=!1,e},o.prototype.remove=function(t){if(null===this._root)return!1;var e=new i(void 0),r=e;r.right=this._root;for(var n=null,o=null,a=null,c=1;null!==r.get_child(c);){var l=c;o=n,n=r,r=r.get_child(c);var f=this._comparator(t,r.data);if(c=f>0,0===f&&(a=r),!s(r)&&!s(r.get_child(c)))if(s(r.get_child(!c))){var p=u(r,c);n.set_child(l,p),n=p}else if(!s(r.get_child(!c))){var d=n.get_child(!l);if(null!==d)if(s(d.get_child(!l))||s(d.get_child(l))){var v=o.right===n;s(d.get_child(l))?o.set_child(v,h(n,l)):s(d.get_child(!l))&&o.set_child(v,u(n,l));var _=o.get_child(v);_.red=!0,r.red=!0,_.left.red=!1,_.right.red=!1}else n.red=!1,d.red=!0,r.red=!0}}return null!==a&&(a.data=r.data,n.set_child(n.right===r,r.get_child(null===r.left)),this.size--),this._root=e.right,null!==this._root&&(this._root.red=!1),null!==a},t.exports=o},function(t,e,r){t.exports={RBTree:r(13),BinTree:r(12)}},function(t,e,r){"use strict";function n(t,e){if(!(this instanceof n))return new n(t,e);if(this.data=t||[],this.length=this.data.length,this.compare=e||i,this.length>0)for(var r=(this.length>>1)-1;r>=0;r--)this._down(r)}function i(t,e){return t<e?-1:t>e?1:0}t.exports=n,t.exports.default=n,n.prototype={push:function(t){this.data.push(t),this.length++,this._up(this.length-1)},pop:function(){if(0!==this.length){var t=this.data[0];return this.length--,this.length>0&&(this.data[0]=this.data[this.length],this._down(0)),this.data.pop(),t}},peek:function(){return this.data[0]},_up:function(t){for(var e=this.data,r=this.compare,n=e[t];t>0;){var i=t-1>>1,o=e[i];if(r(n,o)>=0)break;e[t]=o,t=i}e[t]=n},_down:function(t){for(var e=this.data,r=this.compare,n=this.length>>1,i=e[t];t<n;){var o=1+(t<<1),s=o+1,u=e[o];if(s<this.length&&r(e[s],u)<0&&(o=s,u=e[s]),r(u,i)>=0)break;e[t]=u,t=o}e[t]=i}}},function(t,e,r){var n=0,i=1,o=2,s=3,u=[],h=r(5),a=r(15),c=r(14).RBTree,l=r(11),f=r(3),p=r(10),d=r(9),v=r(2),_=Math.max,g=Math.min;function y(t,e,r,n,i,o){var s=new l(t,!1,void 0,r),u=new l(e,!1,s,r);s.otherEvent=u,s.contourId=u.contourId=n,f(s,u)>0?u.left=!0:s.left=!0,o[0]=g(o[0],t[0]),o[1]=g(o[1],t[1]),o[2]=_(o[2],t[0]),o[3]=_(o[3],t[1]),i.push(s),i.push(u)}var x=0;function I(t,e,r,n,i){var o,s;if("number"==typeof t[0][0])for(o=0,s=t.length-1;o<s;o++)y(t[o],t[o+1],e,r+1,n,i);else for(o=0,s=t.length;o<s;o++)x++,I(t[o],e,x,n,i)}function m(t,e,r,n){var i=new a(null,f);return x=0,I(t,!0,0,i,r),I(e,!1,0,i,n),i}function w(t,e,r,n){null===e?(t.inOut=!1,t.otherInOut=!0):t.isSubject===e.isSubject?(t.inOut=!e.inOut,t.otherInOut=e.otherInOut):(t.inOut=!e.otherInOut,t.otherInOut=e.isVertical()?!e.inOut:e.inOut),e&&(t.prevInResult=!E(e,n)||e.isVertical()?e.prevInResult:e),t.inResult=E(t,n)}function E(t,e){switch(t.type){case h.NORMAL:switch(e){case n:return!t.otherInOut;case i:return t.otherInOut;case o:return t.isSubject&&t.otherInOut||!t.isSubject&&!t.otherInOut;case s:return!0}case h.SAME_TRANSITION:return e===n||e===i;case h.DIFFERENT_TRANSITION:return e===o;case h.NON_CONTRIBUTING:return!1}return!1}function b(t,e,r){var n=d(t.point,t.otherEvent.point,e.point,e.otherEvent.point),i=n?n.length:0;if(0===i)return 0;if(1===i&&(v(t.point,e.point)||v(t.otherEvent.point,e.otherEvent.point)))return 0;if(2===i&&t.isSubject===e.isSubject)return t.contourId===e.contourId&&console.warn("Edges of the same polygon overlap",t.point,t.otherEvent.point,e.point,e.otherEvent.point),0;if(1===i)return v(t.point,n[0])||v(t.otherEvent.point,n[0])||N(t,n[0],r),v(e.point,n[0])||v(e.otherEvent.point,n[0])||N(e,n[0],r),1;var o=[],s=!1,u=!1;return v(t.point,e.point)?s=!0:1===f(t,e)?o.push(e,t):o.push(t,e),v(t.otherEvent.point,e.otherEvent.point)?u=!0:1===f(t.otherEvent,e.otherEvent)?o.push(e.otherEvent,t.otherEvent):o.push(t.otherEvent,e.otherEvent),s&&u||s?(t.type=h.NON_CONTRIBUTING,e.type=t.inOut===e.inOut?h.SAME_TRANSITION:h.DIFFERENT_TRANSITION,s&&!u&&N(o[0].otherEvent,o[1].point,r),2):u?(N(o[0],o[1].point,r),3):o[0]!==o[3].otherEvent?(N(o[0],o[1].point,r),N(o[1],o[2].point,r),3):(N(o[0],o[1].point,r),N(o[3].otherEvent,o[2].point,r),3)}function N(t,e,r){var n=new l(e,!1,t,t.isSubject),i=new l(e,!0,t.otherEvent,t.isSubject);return v(t.point,t.otherEvent.point)&&console.warn("what is that?",t),n.contourId=i.contourId=t.contourId,f(i,t.otherEvent)>0&&(t.otherEvent.left=!0,i.left=!1),t.otherEvent.otherEvent=i,t.otherEvent=n,r.push(i),r.push(n),r}function O(t,e,r,i,s,u){for(var h,a,l=[],f=new c(p),d=(l=[],g(i[2],s[2]));t.length;){var v=t.pop();if(l.push(v),u===n&&v.point[0]>d||u===o&&v.point[0]>i[2])break;if(v.left){if(f.insert(v),a=f.findIter(v),h=f.findIter(v),v.iterator=f.findIter(v),!h||!a){console.log("brute");var _=S(f);h=_[0],a=_[1]}if(h.data()!==f.min()?h.prev():((h=f.iterator()).prev(),h.next()),a.next(),w(v,h.data(),0,u),a.data()&&2===b(v,a.data(),t)&&(w(v,h.data(),0,u),w(v,a.data(),0,u)),h.data()&&2===b(h.data(),v,t)){var y=f.findIter(h.data());y.data()!==f.min()?y.prev():(y=f.findIter(f.max())).next(),w(h.data(),y.data(),0,u),w(v,h.data(),0,u)}}else{if(v=v.otherEvent,a=f.findIter(v),!(h=f.findIter(v))||!a)continue;h.data()!==f.min()?h.prev():((h=f.iterator()).prev(),h.next()),a.next(),f.remove(v),a.data()&&h.data()&&b(h.data(),a.data(),t)}}return l}function S(t,e){for(var r,n=t.iterator(),i=t.iterator(),o=t.iterator();null!==(r=o.next())&&(n.next(),i.next(),r!==event););return[n,i]}function R(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function P(t){return t.reverse()}function T(t){return"[object Array]"===Object.prototype.toString.call(t)}function A(t,e){return T(t[0])&&!T(t[0][0])&&(t=[t]),t[e]=[],t}function k(t){var e,r,n=function(t){var e,r,n,i=[];for(r=0,n=t.length;r<n;r++)((e=t[r]).left&&e.inResult||!e.left&&e.otherEvent.inResult)&&i.push(e);for(var o=!1;!o;)for(o=!0,r=0,n=i.length;r<n;r++)r+1<n&&1===f(i[r],i[r+1])&&(R(i,r,r+1),o=!1);for(r=0,n=i.length;r<n;r++)i[r].pos=r;for(r=0,n=i.length;r<n;r++)if(!i[r].left){var s=i[r].pos;i[r].pos=i[r].otherEvent.pos,i[r].otherEvent.pos=s}return i}(t),i=Array(n.length),o=[],s=[],u=[],h={};for(e=0,r=n.length;e<r;e++)if(!i[e]){var a=[];o.push(a);var c=o.length-1;if(s.push(0),u.push(-1),n[e].prevInResult){var l=n[e].prevInResult.contourId;n[e].prevInResult.resultInOut?h[l]&&(A(o[u[l]],c),u[c]=u[l],s[c]=s[l],h[c]=!0):(A(o[l],c),u[c]=l,s[c]=s[l]+1,h[c]=!0)}var p=e,d=n[e].point;for(a.push(d);p>=e;)i[p]=!0,n[p].left?(n[p].resultInOut=!1,n[p].contourId=c):(n[p].otherEvent.resultInOut=!0,n[p].otherEvent.contourId=c),i[p=n[p].pos]=!0,a.push(n[p].point),p=j(p,n,i);i[p=-1===p?e:p]=i[n[p].pos]=!0,n[p].otherEvent.resultInOut=!0,n[p].otherEvent.contourId=c,1&s[c]&&P(a)}return o}function j(t,e,r){for(var n=t+1,i=e.length;n<i&&v(e[n].point,e[t].point);){if(!r[n])return n;n+=1}for(n=t-1;r[n];)n-=1;return n}function C(t,e,r){var h=function(t,e,r){var h=null;return t.length*e.length==0&&(r===n?h=u:r===o?h=t:r!==i&&r!==s||(h=0===t.length?e:t)),h}(t,e,r);if(h)return h===u?null:h;var a=[1/0,1/0,-1/0,-1/0],c=[1/0,1/0,-1/0,-1/0],l=m(t,e,a,c);return(h=function(t,e,r,h,a){var c=null;return(r[0]>h[2]||h[0]>r[2]||r[1]>h[3]||h[1]>r[3])&&(a===n?c=u:a===o?c=t:a!==i&&a!==s||(c=t.concat(e))),c}(t,e,a,c,r))?h===u?null:h:k(O(l,0,0,a,c,r))}t.exports=C,t.exports.union=function(t,e){return C(t,e,i)},t.exports.diff=function(t,e){return C(t,e,o)},t.exports.xor=function(t,e){return C(t,e,s)},t.exports.intersection=function(t,e){return C(t,e,n)},t.exports.operations={INTERSECTION:n,DIFFERENCE:o,UNION:i,XOR:s},t.exports.fillQueue=m,t.exports.computeFields=w,t.exports.subdivideSegments=O,t.exports.divideSegment=N,t.exports.possibleIntersection=b},function(t,e,r){t.exports=r(16)},function(t,e){function r(t,e){this.current=t,this.next=e,this._inNormal=this.inwardsNormal(),this._outNormal=this.outwardsNormal()}r.prototype.outwardsNormal=function(){var t=this.inwardsNormal();return[-t[0],-t[1]]},r.prototype.inwardsNormal=function(){var t=this.next[0]-this.current[0],e=this.next[1]-this.current[1],r=Math.sqrt(t*t+e*e);if(0===r)throw new Error("Vertices overlap");return[-e/r,t/r]},r.prototype.offset=function(t,e){return r.offsetEdge(this.current,this.next,t,e)},r.prototype.inverseOffset=function(t,e){return r.offsetEdge(this.next,this.current,t,e)},r.offsetEdge=function(t,e,n,i){return new r([t[0]+n,t[1]+i],[e[0]+n,e[1]+i])},r.prototype.inverse=function(){return new r(this.next,this.current)},t.exports=r},function(t,e){var r=function(t,e,r,n){this.x=0,this.y=0,this.toSource=0,this.toClip=0;var i=(n.y-r.y)*(e.x-t.x)-(n.x-r.x)*(e.y-t.y);0!==i&&(this.toSource=((n.x-r.x)*(t.y-r.y)-(n.y-r.y)*(t.x-r.x))/i,this.toClip=((e.x-t.x)*(t.y-r.y)-(e.y-t.y)*(t.x-r.x))/i,this.valid()&&(this.x=t.x+this.toSource*(e.x-t.x),this.y=t.y+this.toSource*(e.y-t.y)))};r.prototype.valid=function(){return 0<this.toSource&&this.toSource<1&&0<this.toClip&&this.toClip<1},t.exports=r},function(t,e){var r=function(t,e){1===arguments.length&&(Array.isArray(t)?(e=t[1],t=t[0]):(e=t.y,t=t.x)),this.x=t,this.y=e,this.next=null,this.prev=null,this._corresponding=null,this._distance=0,this._isEntry=!0,this._isIntersection=!1,this._visited=!1};r.createIntersection=function(t,e,n){var i=new r(t,e);return i._distance=n,i._isIntersection=!0,i._isEntry=!1,i},r.prototype.visit=function(){this._visited=!0,null===this._corresponding||this._corresponding._visited||this._corresponding.visit()},r.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},r.prototype.isInside=function(t){var e=!1,r=t.first,n=r.next,i=this.x,o=this.y;do{(r.y<o&&n.y>=o||n.y<o&&r.y>=o)&&(r.x<=i||n.x<=i)&&(e^=r.x+(o-r.y)/(n.y-r.y)*(n.x-r.x)<i),n=(r=r.next).next||t.first}while(!r.equals(t.first));return e},t.exports=r},function(t,e,r){var n=r(20),i=r(19),o=function(t,e){this.first=null,this.vertices=0,this._lastUnprocessed=null,this._arrayVertices=void 0===e?Array.isArray(t[0]):e;for(var r=0,i=t.length;r<i;r++)this.addVertex(new n(t[r]))};o.prototype.addVertex=function(t){if(null==this.first)this.first=t,this.first.next=t,this.first.prev=t;else{var e=this.first,r=e.prev;e.prev=t,t.next=e,t.prev=r,r.next=t}this.vertices++},o.prototype.insertVertex=function(t,e,r){for(var n,i=e;!i.equals(r)&&i._distance<t._distance;)i=i.next;t.next=i,n=i.prev,t.prev=n,n.next=t,i.prev=t,this.vertices++},o.prototype.getNext=function(t){for(var e=t;e._isIntersection;)e=e.next;return e},o.prototype.getFirstIntersect=function(){var t=this._firstIntersect||this.first;do{if(t._isIntersection&&!t._visited)break;t=t.next}while(!t.equals(this.first));return this._firstIntersect=t,t},o.prototype.hasUnprocessed=function(){var t=this._lastUnprocessed||this.first;do{if(t._isIntersection&&!t._visited)return this._lastUnprocessed=t,!0;t=t.next}while(!t.equals(this.first));return this._lastUnprocessed=null,!1},o.prototype.getPoints=function(){var t=[],e=this.first;if(this._arrayVertices)do{t.push([e.x,e.y]),e=e.next}while(e!==this.first);else do{t.push({x:e.x,y:e.y}),e=e.next}while(e!==this.first);return t},o.prototype.clip=function(t,e,r){var s,u,h=this.first,a=t.first,c=!e&&!r,l=e&&r;do{if(!h._isIntersection)do{if(!a._isIntersection){var f=new i(h,this.getNext(h.next),a,t.getNext(a.next));if(f.valid()){var p=n.createIntersection(f.x,f.y,f.toSource),d=n.createIntersection(f.x,f.y,f.toClip);p._corresponding=d,d._corresponding=p,this.insertVertex(p,h,this.getNext(h.next)),t.insertVertex(d,a,t.getNext(a.next))}}a=a.next}while(!a.equals(t.first));h=h.next}while(!h.equals(this.first));h=this.first,a=t.first,e^=s=h.isInside(t),r^=u=a.isInside(this);do{h._isIntersection&&(h._isEntry=e,e=!e),h=h.next}while(!h.equals(this.first));do{a._isIntersection&&(a._isEntry=r,r=!r),a=a.next}while(!a.equals(t.first));for(var v=[];this.hasUnprocessed();){var _=this.getFirstIntersect(),g=new o([],this._arrayVertices);g.addVertex(new n(_.x,_.y));do{if(_.visit(),_._isEntry)do{_=_.next,g.addVertex(new n(_.x,_.y))}while(!_._isIntersection);else do{_=_.prev,g.addVertex(new n(_.x,_.y))}while(!_._isIntersection);_=_._corresponding}while(!_._visited);v.push(g.getPoints())}return 0===v.length&&(c?s?v.push(t.getPoints()):u?v.push(this.getPoints()):v.push(this.getPoints(),t.getPoints()):l?s?v.push(this.getPoints()):u&&v.push(t.getPoints()):s?v.push(t.getPoints(),this.getPoints()):u?v.push(this.getPoints(),t.getPoints()):v.push(this.getPoints()),0===v.length&&(v=null)),v},t.exports=o},function(t,e,r){var n=r(21);
/**
 * Greiner-Hormann polygon clipping
 * @license MIT
 * @author Milevski Alexander (c) 2014
 * @preserve
 */t.exports=function(t,e,r,i){var o=new n(t),s=new n(e);return o.clip(s,r,i)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,